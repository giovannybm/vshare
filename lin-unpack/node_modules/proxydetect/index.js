'use strict';

const addon = require('proxydetect/proxydetect.node');

const http = require('http');
const pac = require('pac-resolver');
const url = require('url');

function getPacFile(url, callback) {
    try {
        http.get(url, (res) => {
            const statusCode = res.statusCode;
            const contentType = res.headers['content-type'];

            let error;

            if (statusCode !== 200) {
                error = new Error(`WPAD HTTP request failed: status code: ${statusCode}`);
            } else if (!/^application\/x-ns-proxy-autoconfig/.test(contentType)) {
                error = new Error(`WPAD Invalid content-type ${contentType}`);
            }

            if (error) {
                res.resume();
            }

            let rawData = '';
            res.on('data', (chunk) => rawData += chunk);
            res.on('end', () => {
                callback(error, rawData);
            });
        }).on('error', callback);
    }
    catch(ex) {
        callback(ex, null);
        return;
    }
}

/**
 * FindProxyForURL returns a semicolon-delimited list of proxies that may be
 * prefixed with PROXY or SOCKS5, or contain DIRECT for a direct connection.
 *
 * If we have such a list, extract the hostname/IP address and port of the
 * first proxy in the list and return that.
 * @param string
 * @returns {string}
 */
function proxyUrlStrip(string) {
    const match = /(?:(?:PROXY|SOCKS\w*)\s+(.*?:\d+)(?:;*.*)$|DIRECT(?:;*.*))/.exec(string);

    return match[1] ? match[1] : "";
}

function getAutoProxyFor(theUrl, callback) {
    const pacUrl = addon.getProxyAutoconfURL();

    if (!pacUrl) {
        return callback(null, '');
    }
    const hostname = url.parse(theUrl).hostname;

    getPacFile(pacUrl, (error, data) => {
        if (error) {
            callback(error, null);
            return;
        }

        try {
            let FindProxyForURL = pac(data);
            FindProxyForURL(theUrl, hostname, (err, res) => {
                if (err) {
                    callback(err, null);
                    return;
                } else {
                    callback(null, proxyUrlStrip(res));
                    return;
                }
            });
        }
        catch(ex) {
            callback(ex, null);
            return;
        }
    });
}

function getManualProxyFor(theUrl) {
    const proxies = addon.getManualProxyServers();

    if (/^http:\/\/.*/.test(theUrl) && proxies.http_proxy) {
        return proxies.http_proxy;
    } else if (/^https:\/\/.*/.test(theUrl) && proxies.https_proxy) {
        return proxies.https_proxy;
    } else {
        return '';
    }
}

/**
 * Returns the system proxy for a given URL.
 *
 * The manually configured setting is probed first in an OS-dependent fashion:
 *  - Windows: The ProxyEnable and ProxyServer values in
 *             HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings
 *  - macOS: HTTP{,S}{Proxy,Port} inside the System Configuration datastore
 *  - Linux: get HTTP{,S}_PROXY variables from the environment
 *
 *  If no proxy is configured by the user, attempt to get an autoconfiguration
 *  URL for web proxy autodetection:
 *  - Windows: Perform a DHCP query using option 252 (MSFT_IE_PROXY)
 *  - macOS: Get the autodetected URL from the System Configuration store
 *  - Linux: not supported
 * @param {string} url
 * @param callback
 * @returns {*}
 */
exports.getProxyFor = function(url, callback) {
    const manualProxy = getManualProxyFor(url);
    if (manualProxy) {
        callback(null, manualProxy);
        return;
    } else {
        getAutoProxyFor(url, callback);
    }
};
