'use strict';

var os = require('os');

var async = require('async');

// define custom statistics by calling

// addCustomStats(
// category: String,
// [{	name: String,
// 		initValue: Number,
//		type: {'periodic', 'absolute'}
//		collect() -> data: function
// }, ...])

//   == OR ==

// addAsyncCategory(
// category: String,
// collector(cb(
// 	[{
// 		name: String,
// 		type: {'periodic', 'absolute'},
// 		value: data
// 	}, ...])): function)

var ResourceMonitor = function ResourceMonitor(config, logger, diskMonitor) {
	this.stats = {};
	this.customStats = {};
	this._diskMon = diskMonitor;
	this.asyncCollectors = this._diskMon ? {diskStats: this._diskMon.collect.bind(this._diskMon)} : {};
	this.log = logger;

	this.intervalSeconds = config.interval || 60;

	// BunyanMongo ->		max: config.keepHistoryFor * 3600 * (60 / this.intervalSeconds)
	this._prevCustomStat = {};

	this.processor = this.log.perf.info.bind(this.log.perf);
	this.processor({
			nodeVersion: process.versions
		}, 'Initial process stats');

	// intervals taken from os.loadavg()
	var cpuLoadIntl = [60, 5 * 60, 15 * 60];
	if(this.intervalSeconds < cpuLoadIntl[1]) {
		this.cpuLoadIdx = 0;
	} else if(this.intervalSeconds < cpuLoadIntl[2]) {
		this.cpuLoadIdx = 1;
	} else {
		this.cpuLoadIdx = 2;
	}
};

ResourceMonitor.prototype.addCustomStats = function addCustomStats(category, customStats) {
	this.customStats[category] = customStats;
	this._prevCustomStat[category] = {};
	customStats.forEach(function(stat) {
		this._prevCustomStat[category][stat.name] = stat.initValue || 0;
	}.bind(this));
};

ResourceMonitor.prototype.addAsyncCategory = function addAsyncCategory(category, collector) {
	this.asyncCollectors[category] = collector;
	this._prevCustomStat[category] = {};
};

ResourceMonitor.prototype.start = function start() {
	this._collect();
	var timer = setInterval(this._collect.bind(this), this.intervalSeconds * 1000);
};

ResourceMonitor.prototype.getStats = function getStats() {
	return this.stats;
};

ResourceMonitor.prototype.dump = function dump() {
	this.processor({stats: this.stats}, 'Process stats');
};

function bytesToMBs(bytes) {
	var bytesInMB = 1024 * 1024;
	//TODO: use bunyan serializers instead of hardcoding format here
	return (bytes / bytesInMB).toFixed(2);
}

ResourceMonitor.prototype._perSecond = function _perSecond(newValue, oldValue) {
	return (newValue - oldValue) / this.intervalSeconds;
};

ResourceMonitor.prototype._setCustomStat = function _setCustomStat(category, stat, newValue) {
	switch (stat.type) {
		case 'periodic':
			this.stats[category][stat.name] = this._perSecond(newValue, (this._prevCustomStat[category][stat.name] || 0)).toFixed(2);
			break;
		case 'absolute':
			this.stats[category][stat.name] = newValue;
			break;
	}
	this._prevCustomStat[category][stat.name] = newValue;
};

ResourceMonitor.prototype._collect = function _collect() {
	this.stats = {
		// choose avg interval closest to the monitor interval
		cpuLoadAvg: (os.loadavg()[this.cpuLoadIdx]).toFixed(3),
		memoryMB: {
			free: bytesToMBs(os.freemem()),
			total: bytesToMBs(os.totalmem())
		},
		v8HeapSizeMB: {
			rss: bytesToMBs(process.memoryUsage().rss),
			used: bytesToMBs(process.memoryUsage().heapUsed),
			total: bytesToMBs(process.memoryUsage().heapTotal)
		}
	};

	for(var category in this.customStats) {
		this.stats[category] = {};
		var allFromCategory = this.customStats[category];
		allFromCategory.forEach(function(stat) {
			if(stat.collect) {
				var newValue = stat.collect(this.intervalSeconds);
				this._setCustomStat(category, stat, newValue);
			}
		}.bind(this));
	}

	var categories = Object.keys(this.asyncCollectors);
	async.parallel(this.asyncCollectors, function(err, results) {
		if(err) {
			return this.log.perf.error({err: err}, 'Unable to collect statistics');
		}
		categories.forEach(function(category) {
			if(category == 'diskStats') return;

			this.stats[category] = {};
			var result = results[category];
			result.forEach(function(stat) {
				this._setCustomStat(category, stat, stat.value);
			}.bind(this));
		}.bind(this));

		if(results.diskStats) {
			this.stats.disk = results.diskStats;
		}

		this.dump();
	}.bind(this));
};

module.exports = ResourceMonitor;