function NetworkMonitor() {
	this.numRequests = 0;
	this.errors = 0;
	this.avgRespTime = 0;

	this.bytesRead = 0;
	this.bytesWritten = 0;

	this.resourceMonitor = undefined;

	this._numReqsPerCycle = 0;

	var $this = this;

	this.measure = function measure(req, res, next) {
		req.startTime = process.hrtime();
		req.sn = this.numRequests;
		$this.numRequests++;
		res.once('finish', function finishHandler() {
			var duration = process.hrtime(req.startTime);
			duration = (duration[0] * 1e9 + duration[1]) / 1e6;
			$this.avgRespTime = ($this.avgRespTime * $this._numReqsPerCycle + duration)
				/ ($this._numReqsPerCycle + 1);
			$this._numReqsPerCycle++;

			$this.bytesRead +=
				(req.socket && req.socket.bytesRead) ||
				(req.connection && req.connection.socket && req.connection.socket.bytesRead) || 0;
			$this.bytesWritten +=
				(req.socket && req.socket.bytesWritten) ||
				(req.connection && req.connection.socket && req.connection.socket.bytesWritten) || 0;
		});
		res.once('error', function errorHandler() {
			$this.errors++;
		});

		next();
	};

	this._bootstrap = function(resourceMonitor) {
		if (this.resourceMonitor) {	// already initialized
			return;
		}

		this.resourceMonitor = resourceMonitor;
		this.resourceMonitor.addCustomStats('network', [
			{
				name: 'numRequests',
				type: 'periodic',
				collect: function () {
					this._numReqsPerCycle = 0;
					return this.numRequests;
				}.bind(this)
			},
			{
				name: 'errors',
				type: 'periodic',
				collect: function () {
					return this.errors;
				}.bind(this)
			},
			{
				name: 'avgRespTimeMs',
				type: 'absolute',
				collect: function () {
					var avgTime = this.avgRespTime;
					this.avgRespTime = 0;
					return avgTime.toFixed(3);
				}.bind(this)
			},
			{
				name: 'bytesRead',
				type: 'periodic',
				collect: function () {
					return this.bytesRead;
				}.bind(this)
			},
			{
				name: 'bytesWritten',
				type: 'periodic',
				collect: function () {
					return this.bytesWritten;
				}.bind(this)
			}
		]);
	}
}

var measurer = new NetworkMonitor();

module.exports = function(resourceMonitor) {
	resourceMonitor && measurer._bootstrap(resourceMonitor);

	return measurer;
};
